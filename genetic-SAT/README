===== Řešení problému vážené splnitelnosti booleovské formule pokročilou iterativní metodou =====
===== Zadani =====
Problém
Je dána booleovská formule F proměnnných X=(x1, x2, … , xn) v konjunktivní normální formě (tj. součin součtů). Dále jsou dány celočíselné kladné váhy W=(w1, w2, … , wn). Najděte ohodnocení Y=(y1, y2, … , yn) proměnných x1, x2, … , xn tak, aby F(Y)=1 a součet vah proměnných, které jsou ohodnoceny jedničkou, byl maximální.

Je přípustné se omezit na formule, v nichž má každá klauzule právě 3 literály (problém 3 SAT). Takto omezený problém je stejně těžký, ale možná se lépe programuje a lépe se posuzuje obtížnost instance (viz Selmanova prezentace v odkazech).

Poznámka
Obdobný problém, který má optimalizační kritérium ve tvaru „aby počet splněných klausulí byl maximální“ a kde váhy se týkají klausulí, se také nazývá problém vážené splnitelnosti booleovské formule. Tento problém je lehčí a lépe aproximovatelný. Oba problémy se často zaměňují i v seriózní literatuře.

Příklad
x1' značí negaci x1.
n = 4 
F = (x1 + x3' + x4).(x1' + x2 + x3').(x3 + x4).(x1 + x2 + x3' + x4').(x2' + x3).(x3' + x4') 
W = (2, 4, 1, 6)

Přípustné konfigurace, kde F=1 (řešení):
X = {x1 … xn} = {0, 0, 0, 1}, S = 6 
X = {x1 … xn} = {1, 0, 0, 1}, S = 2 + 6 = 8 (optimální) 
X = {x1 … xn} = {1, 1, 1, 0}, S = 2 + 4 + 1 = 7 

Tato instance v DIMACS CNF formátu
c Priklad CNF
c 4 promenne a 6 klauzuli
c kazda klauzule konci nulou (ne novym radkem)
p cnf 4 6
1 -3 4 0
-1 2 -3 0
3 4 0
1 2 -3 -4 0
-2 3 0
-3 -4 0

Pokyny k řešení
Problém řešte některou z pokročilých lokálních heuristik (simulované ochlazování, genetické algoritmy, tabu prohledávání). Řešení jinými metodami prosím zkonzultovat se cvičícím nebo přednášejícím. Volby konkrétních parametrů heuristiky a jejích detailů (operace nad stavovým prostorem, kritérium ukončení, atd. atd.) proveďte sami, tyto volby pokud možno zdůvodněte a ověřte experimentálním vyhodnocením. Hodnocení Řešení této úlohy je podstatnou součástí hodnocení zkoušky (30 bodů ze 100). Hodnotí se především postup při aplikaci heuristiky, tj. postup a experimenty, jakým jste dospěli k výsledné podobě (parametry, konkrétní operátory apod.). Například, pokud máte v řešení nějaké hodně neortodoxní prvky a pokud máte jejich výhodnost experimentálně doloženou, těžko mohou vzniknout námitky. Méně významné jsou konkrétní dosažené výsledky. Nežádáme rozhodně, aby semestrální práce měla úroveň světové výzvy Centra diskrétní matematiky Rutgersovy univerzity.

Tato práce by měla sloužit jako ověření Vašich schopností používat zvolenou pokročilou iterativní metodu. Ideálním výstupem by měl být algoritmus schopný řešit co nejširší spektrum instancí s rozumnou chybou. To neznamená, že pokud se Vám některé instance „nepovedou“, je vše špatně. Důležité je, abychom viděli, že jste se aspoň snažili. Někdy to prostě nejde…

Hodnocení 6. úlohy je rozdělené do třech základních bodů:
Algoritmus a implementace (7 b)
	- Byly použity techniky (procedury, datové struktury), přiměřené problému?
	- Obsahuje řešení sofistikovanější postupy, adaptační mechanismy?
	- Obsahuje řešení (ověřené, porovnané!) autorovy originální prvky?
Práce s heuristikou (13 b)
	- Jak autor postupoval při stanovení parametrů a modifikací heuristiky?
	- Jetliže postupoval systematicky, jak dobře byly navrženy experimenty během práce?
	- Jestliže se uchýlil k slepému prohledávání prostoru parametrů, je pokrytí tohoto prostoru dostatečné?
	- Pro jak širokou třídu instancí autorova implementace pracuje?
	- Jestliže experimentální vyhodnocení signalizuje neúspěch, snažil se autor systematicky odhalit příčinu a byly přiměřeně vyčerpány možnosti nápravy?
Experimentální vyhodnocení (10 b)
	- Jak autor podpořil svoje tvrzení měřením?
	- Má měření skutečně tu vypovídací hodnotu, jakou mu připisuje autor?
	- Byl dostatečně zohledněn eventuální randomizovaný způsob práce algoritmu?
	- Dá se z výsledků usoudit na dostatečnou iterativní sílu lokálního algoritmu?
	- Jestliže řešení obsahuje neobvyklé, nestandardní postupy, existuje alespoň základní srovnání se standardními postupy?
	- Je výsledek měření správně prezentován?
Práce, kterým zcela chybí experimentální část, nelze přijmout k hodnocení.
Neúspěch při aplikaci nějaké heuristiky nevylučuje dobré hodnocení, jestliže postup prací byl racionální a prokazuje autorovu poučenost.

Prosím neptejte se nás, co vše má být ve zprávě a co vlastně máte udělat. Představte si situaci, že Vám šéf ve firmě nakáže, abyste mu naprogramovali nástroj, který dobře řeší nějaký problém. A nic víc Vám neřekne, protože tomu sám nerozumí. Vy sami musíte zhodnotit, co je potřeba udělat, abyste ověřili, že to opravdu funguje, případně abyste byli schopni se obhájit, když to (někdy) nefunguje. Po absolvování tohoto předmětu byste sami měli vědět, jak na to.

6. úlohu odevzdávejte minimálně týden před zkouškou. Z množstevních důvodů není možné ji kontrolovat při zkoušce, kromě nouzových situací, dohodnutých se zkoušejícím.
. Hodnocení úloh Vám bude včas sděleno. Hodnocení bude definitivní, bez šance na opravu (u testů je to také tak…).

Zkušební instance
Zkušební instance lze poměrně snadno vygenerovat náhodně. Důležitým parametrem, který řídí obtížnost instancí zejména pro 3 SAT, je poměr počtu klauzulí a proměnných (viz Selman - originál - MS Office 6, PDF, doporučujeme přečíst). Váhy proměnných generujte také náhodně. Volte instance přiměřené obtížnosti. Zkušební instance DIMACS nemají váhy. Dogenerujte je sami. Tyto instance jsou značně obtížné. Existuje ale jednoduchý způsob, jak jejich obtížnost snížit: prostě je zkrátit - vypustit z nich určitý počet klauzulí.

Bohužel nemáme k dispozici žádné instance, pro které známe optimální řešení. To je způsobeno hlavně tím, že nemáme ani instance s vahami. Tudíž nebudete schopni odhadnout, jak dobře Váš algoritmus opravdu funguje. Ale nám to nevadí, důležité je, abyste nás přesvědčili, že víte, co děláte.

Na druhou stranu by se tato situace mohla změnit, když nám pomůžete. Proto prosím ke zprávě přiložte Vaše zkušební instance (i s vahami) a nejlepší řešení, kterých jste dosáhli. My si pak vybereme.

Práce s omezujícími podmínkami a počáteční instance
Pravděpodobně není reálné pracovat pouze s přípustnými řešeními. Je obava, že stavový prostor by se tím stal značně přetržitým, se špatnou dostupností. Přípustná řešení jako počáteční konfigurace nebo populace by se dala získat z nějakého SAT řešiče (dohodněme se, že je to přípustné), ale nemyslím, že je to dobrý nápad. Heuristika by tak startovala z (možná hlubokého) lokálního minima, navíc možná obklopeného nepřípustnými konfiguracemi. Museli bychom tedy stejně heuristiku připravit na práci s nepřípustnými konfiguracemi. Pokud použijete nějakou relaxační techniku a náhodný start (populaci), řešíme vlastně variantu MAX SAT s max počtem splněných klauzulí (v případě katastrofálního selhání práce i toto je lepší než nic). Vhodnou volbou pokut relaxace bychom měli dostat uspokojivě pracující proceduru.

Odkazy
 - http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html - V roce 1993 vypsalo Centrum diskrétní matematiky (Center for Discrete Mathematics and Theoretical Computer Science, DIMACS) university státu New Jersey (Rutgers) projekt a soutěž na řešení obtížných kombinatorických problémů. Část, zabývající se splnitelností, se týkala problému maximální splnitelnosti (tedy bez vah). Jsou zde definovány formáty vstupních a výstupních souborů (CNF a SAT, často nazývané DIMACS formát). V těchto formátech jsou zde zkušební instance. Budeme se těchto formátů držet, ale bude potřeba doplnit váhy proměnných
 - http://www.satlib.org/ - SATLIB.
 - Stochastic Search And Phase Transitions:AI Meets Physics. Bart Selman, AT&T Bell Laboratories, Murray Hill, N.J. USA. Originál - MS Office 6, PDF. Důležitá prezentace o řešení problému splnitelnosti (ponejvíce diskutovány Greedy SAT a WALKSAT). Diskuze tzv. fázových přechodů.


===== Algoritmus a implementace =====

Jako jazyk pro implemntaci reseni SAT problemu jsem si zvolil Ruby. Tenot jazyk jsem pouzil i k reseni predchozich uloh a velmi jsem si ho oblibil.

==== Generator nahodnych instanci ====

Vytvoril jsem si program pro generovani nahodnych instanci SAT problemu v DIMACS formatu rozsireneho o vahy jednotlivych promennych. 

Parametry programu jsou:
  - pocet promennych (defaultne 4)
  - pocet klauzuli (defaultne 6)
  - minimalni vaha promennych (defaultne 1)
  - maximalni vaha promennych (defaultne 10)

Vahy se generuji do komentaru DIMACS formatu nasledujicim zpusobem:
  c weights 2 4 1 6

Priklad vystupu generatoru SAT instanci:
<code>
ruby generate.rb 5 5
</code>
<code>
c 5 promenne 5 klauzuli
c weights 8 1 8 8 1
p cnf 5 5
1 -3 4 -5 0
1 2 3 -4 0
-1 2 3 4 0
-1 2 -4 0
-1 -2 -3 4 5 0
</code>

==== Algoritmus reseni ====

Nejprve jsem si pro problem naprogramoval reseni pomoci BruteForce, ktere prochazi vsechny mozne stavy a najde mi vzdy nejlepsi reseni. Casti tohoto algoritmu, predevsim vypocet vahy reseni, jsem pote pouzil v genetickem algoritmu. Presne reseni jsem potreboval hlavne kvuli presnym vysledkum, abych mohl spravne nastavit paremetry genetickeho algoritmu a abych mohl merit odchylku vysledku genetickeho algoritmu od optimalniho reseni.


Pro reseni problemu SAT pomoci pokrocilych lokalnich heuristik jsem pouzil geneticky algoritmus. Upravil jsem algoritmus z pate ulohy tak, aby vyhovoval reseni problemu SAT. Musel jsem upravit vypocet vahy a splnitelnosti pro jednotlive instance. Zaklad algoritmu ale zustal stejny.

Pro zakodovani genu kazde instance jsem pouzil bitovy retezec (0 a 1), ktery odpovida ohodnoceni danych promennych.

U pate ulohy jsem vyuzil moznostu prekrocit celkovou vahu veci v batohu s jistou penalizaci, toho jsem bohuzel u SATu vyuzit nemohl, jelikoz vaha se pocita jen pro splnitelne formule a nemelo by smysl pocitat vahy pro nesplnitelne formule.

Program ma tri parametry:
  - cesta k souboru se vstupnimi daty v DIMACS formatu z generatoru nahodnych instanci
  - typ algoritmu geneticky X bruteforce (defaultni = geneticky)
  - cesta k souboru pro ulozeni vystupu algoritmu (defaultni = standardni vystup)


Algoritmu pouziva pro vygenerovani populace nahodny algoritmus.


===== Práce s heuristikou =====

Pro stanoveni parametru genetickeho algoritmu, jsem vychazel z parametru pate ulohy. Postupne jsem menil vzdy jen jeden parametr a kontroloval jsem zmeny ve vysledcich algoritmu. Pro urcovani parametru jsem vyuzil vygenerovanoe zadani s 20 promennymi a 400 klauzulemi.

Ze zacatku mereni jsem pouzival jen kladne hodnoty pro vahy vygenerovanych instanci na skale od 1 do 10. Pak se mi ale stavalo, ze reseni s nejvyssi vahou melo vsechny promenne rovny 1, coz je i logicke. Pokousel jsem se snizit pocet promennych v pomeru proti poctu klauzuli, stale ale ve vetsine pripadu bylo nejlepsi reseni ohodnoceno samymi jednickami. Pote jsem tedy zacal generovat vahy zadani na skale od -10 do +10. To tedy znamena, ze pokud je promenna ohodnocena 1, nemusi se jednat o zvyseni celkove vahy jedince, naopak se muze jednat o snizeni celkove vahy.

Pro urcovani parametru jsem vzdy menil jen jeden parametr a ostatni byly zafixovany, stavalo se mi ale (napriklad u pravdepodobnosti krizeni), ze se vysledky parametru temer nelisily. Musel jsem proto snizit ostatni parametry, aby byl videt rozdil zmeny teto jedne promenne, ale stalo se mi (u pravdepodobnosti krizeni), ze byl vliv zmeny promenne minimalni.

Vsechny parametry jsem ladil na nekolika instancich s ruznymi parametry:
  - pocet promennych 10 pocet klauzuli 100
  - pocet promennych 20 pocet klauzuli 100
  - pocet promennych 20 pocet klauzuli 400

Zacinal jsem vzdy u mensich instanci a pote jsem upravoval parametry i pro vetsi instance.

U parametru pravdepodobnosti, ktere lezi mezi 0 a 1 jsem pri urcovani postupoval od 0.1 do 1 a postupoval jsem o 0.1, pri nekterych zmenach vysledku jsem parametry upravoval i po mensich krocich. Experimentoval jsem u parametru i s pomerem ku poctu promennych a poctu klauzuli.

U parametru vetsich nez 1 jsem postupoval vetsinou exponencialne, dokud byla odchyla vysledku < 10%.


Zde prikladam graf vyvoje behu genetickeho algoritmu pro 100 promennych a 100 klauzuli s hodnotami vah od -10 do +10. Modre je znazornen jedinec s nejlepsi vahou  a oranzove jedinec s nejhorsi vahou v populaci, cervene je znazornen prumer vsech jedincu v populaci.

{{:student:skvarjak:sat_vyvoj_100x100.png|}}


Dale jsem vytvoril graf porovnani rychlosti behu algoritmu vypoctu hrubou silou (bruteforce) a genetickeho algoritmu pro zadani 20 promennych a 400 klauzuli.

{{:student:skvarjak:porovnani_casu_brute_gen.png|}}

Pripravil jsem graf relativni odchylky genetickeho algoritmu od optimalniho reseni (vypocitaneho pomoci algoritmu hrube sily). Geneticky algoritmus mel nastavenou velikost populace na 50 jedincu. Zbytek promennych zustal stejny. Je videt, ze v polovine pripadu byl vysledek optimalni, ale v jednom pripade se vysledek lisil az o 9 procent. Pri zvetseni populace na 100 jednincu je jiz relativni odchylka nulova.

{{:student:skvarjak:relative_error_genetics.png|}}

===== Experimentální vyhodnocení, zaver =====

Vysledne nastaveni parametru je nasledujici:
  - velikost populace = 500
  - pravdepodobnost krizeni = 0.7
  - pravdepodobnost mutace = 2 / pocet_promennych
  - maximalni pocet generaci = 100
  - maximalni pocet generaci bez zlepseni = 25
  - dvoubodove krizeni = nezalezi

Vsechna mereni jsem opakoval desetrat, vzdy s jinak vygenerovanym zadanim (se stejnymi parametry generatoru zadani), aby nedochazelo ke zkresleni neoptimalnimi vysledky algoritmu.

Pro mensi problemy (vypozoroval jsem, ze do 30 promennych a 100 klauzuli) stacilo nastavit velikost populace na 100 jedincu. Pro slozitejsi problemy jsem jiz musel pro uspokojive vysledky zvetsovat velikost populace, napriklad pro 50 promennych a 100 klauzuli uz bylo potreba nastavit populaci na 200 jedincu pro chybovost < 10% (spoustel jsem 10 opakovani pro kazdy experiment, pro presnejsi urceni chybovosti by se musel opakovat beh algoritmu vicekrat).

Pri porovnavani jednobodoveho a dvoubodoveho krizeni se vysledky lisily jen minimalne a vysledky obou moznosti zalezely hlavne na nahode. Vybral jsem dvoubodove krizeni, ale vyledky tohoto parametru by byly podobne, kdyby bylo nastaveno i jednobodove krizeni.

Cas vypoctu se tim ale zvysil. Pro vice promennych se musi velikost populace zvysovat jeste vice, napriklad pro 100 promennych a 100 klauzuli jiz musela byt populace zvysena na 500 jedincu, aby byla relativni chyba vysledku < 10%, vypocet genetickeho algoritmu je pak pro slozitejsi zadani prilis dlouhy.

Optimalitu reseni jsem kontroloval pomoci bruteforce algoritmu jen do velikosti vygenerovaneho zadani 20 promennych a 400 klauzuli. Pro vetsi zdani jiz bruteforce algoritmus trval prilis dlouho pro zkontrolovani a proto jsem geneticky algoritmus kontroloval jen nekolikerym spustenim, zda dojde ke stejnemu vysledku (je nutno dodat, ze takoveto urcovani je optimality je jen priblizne).

Algoritmus je nastaveny tak, ze dava optimalni vysledky do velikosti problemu se 100 promennymi a 100 klauzulemi. Pro zadani s vice promennymi musi byt nastavena velikost populace vetsi a vypocet trva na mem PC (2x 2.2GHz CPU, 6GB RAM, 32 bit, Ubuntu Linux) dlouhou dobu. Algoritmus by se ale dal zvysenim poctu jedincu v populaci pouzit i pro vetsi instance.
